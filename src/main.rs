use std::env;
use std::fs;
use std::io;
use std::path::{Path, PathBuf};
use std::collections::BTreeMap;
use std::time::Instant;
use std::cmp::Ordering;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
struct DirInfo {
    size: u64,
    file_count: usize,
    largest_file: Option<(PathBuf, u64)>,
    file_types: BTreeMap<String, u64>,
}

impl DirInfo {
    fn new() -> Self {
        DirInfo {
            size: 0,
            file_count: 0,
            largest_file: None,
            file_types: BTreeMap::new(),
        }
    }
}

fn main() -> io::Result<()> {
    let args: Vec<String> = env::args().collect();
    let start_path = if args.len() > 1 {
        PathBuf::from(&args[1])
    } else {
        env::current_dir()?
    };

    println!("üîç –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è: {:?}", start_path);
    println!("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...");
    
    let start_time = Instant::now();
    let mut dir_infos: BTreeMap<String, DirInfo> = BTreeMap::new();
    
    let total_info = scan_directory(&start_path, &mut dir_infos)?;
    
    let elapsed = start_time.elapsed();
    println!("\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {:.2} —Å–µ–∫—É–Ω–¥", elapsed.as_secs_f32());
    println!("üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {} –ú–ë ({} —Ñ–∞–π–ª–æ–≤)\n", format_size(total_info.size), total_info.file_count);
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    let mut size_vec: Vec<(String, DirInfo)> = dir_infos.into_iter().collect();
    size_vec.sort_by(|a, b| b.1.size.cmp(&a.1.size));
    
    println!("üìÅ –¢–û–ü –î–ò–†–ï–ö–¢–û–†–ò–ò –ü–û –†–ê–ó–ú–ï–†–£:");
    println!("{:<15} {:<12} {:<}", "–†–ê–ó–ú–ï–†", "–§–ê–ô–õ–û–í", "–ü–£–¢–¨");
    println!("{:-<60}", "");
    
    // –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-15 –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
    for (i, (path, info)) in size_vec.iter().take(15).enumerate() {
        let icon = match i {
            0 => "üî¥",
            1 => "üü†",
            2 => "üü°",
            _ => "üîπ",
        };
        
        println!("{} {:<15} {:<12} {:<}", 
                icon,
                format_size(info.size), 
                info.file_count,
                path);
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    println!("\nüìÑ –°–ê–ú–´–ï –ë–û–õ–¨–®–ò–ï –§–ê–ô–õ–´:");
    println!("{:<15} {:<}", "–†–ê–ó–ú–ï–†", "–ü–£–¢–¨");
    println!("{:-<60}", "");
    
    let mut largest_files: Vec<(PathBuf, u64)> = Vec::new();
    for (_, info) in size_vec.iter() {
        if let Some(file_info) = &info.largest_file {
            largest_files.push(file_info.clone());
        }
    }
    
    largest_files.sort_by(|a, b| b.1.cmp(&a.1));
    for (path, size) in largest_files.iter().take(5) {
        println!("{:<15} {:<}", format_size(*size), path.display());
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    let mut file_type_totals: BTreeMap<String, u64> = BTreeMap::new();
    for (_, info) in size_vec.iter() {
        for (ext, size) in &info.file_types {
            *file_type_totals.entry(ext.clone()).or_insert(0) += size;
        }
    }
    
    let mut file_types_vec: Vec<(String, u64)> = file_type_totals.into_iter().collect();
    file_types_vec.sort_by(|a, b| b.1.cmp(&a.1));
    
    println!("\nüìä –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:");
    println!("{:<15} {:<}", "–†–ê–ó–ú–ï–†", "–¢–ò–ü");
    println!("{:-<60}", "");
    
    for (ext, size) in file_types_vec.iter().take(8) {
        let ext_name = if ext.is_empty() { "[–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è]" } else { ext };
        println!("{:<15} {:<}", format_size(*size), ext_name);
    }
    
    // –°–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    generate_optimization_tips(&size_vec, &largest_files);
    
    Ok(())
}

fn scan_directory(dir: &Path, dir_infos: &mut BTreeMap<String, DirInfo>) -> io::Result<DirInfo> {
    let mut current_info = DirInfo::new();
    
    if dir.is_dir() {
        for entry in fs::read_dir(dir)? {
            let entry = entry?;
            let path = entry.path();
            
            if path.is_dir() {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                let subdir_info = scan_directory(&path, dir_infos)?;
                current_info.size += subdir_info.size;
                current_info.file_count += subdir_info.file_count;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ñ–∞–π–ª–µ
                if let Some(largest) = &subdir_info.largest_file {
                    match &current_info.largest_file {
                        Some(current_largest) if largest.1 > current_largest.1 => {
                            current_info.largest_file = Some(largest.clone());
                        },
                        None => current_info.largest_file = Some(largest.clone()),
                        _ => {}
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if let Some(path_str) = path.to_str() {
                    dir_infos.insert(path_str.to_string(), subdir_info);
                }
            } else if path.is_file() {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if let Ok(metadata) = fs::metadata(&path) {
                    let file_size = metadata.len();
                    current_info.size += file_size;
                    current_info.file_count += 1;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –±–æ–ª—å—à–æ–º —Ñ–∞–π–ª–µ
                    match &current_info.largest_file {
                        Some(largest) if file_size > largest.1 => {
                            current_info.largest_file = Some((path.clone(), file_size));
                        },
                        None => current_info.largest_file = Some((path.clone(), file_size)),
                        _ => {}
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
                    let extension = path.extension()
                        .and_then(|e| e.to_str())
                        .unwrap_or("")
                        .to_lowercase();
                    
                    *current_info.file_types.entry(extension).or_insert(0) += file_size;
                }
            }
        }
    }
    
    Ok(current_info)
}

fn format_size(size: u64) -> String {
    if size < 1024 {
        format!("{} –ë", size)
    } else if size < 1024 * 1024 {
        format!("{:.1} –ö–ë", size as f64 / 1024.0)
    } else if size < 1024 * 1024 * 1024 {
        format!("{:.1} –ú–ë", size as f64 / (1024.0 * 1024.0))
    } else {
        format!("{:.2} –ì–ë", size as f64 / (1024.0 * 1024.0 * 1024.0))
    }
}

fn generate_optimization_tips(dirs: &Vec<(String, DirInfo)>, largest_files: &Vec<(PathBuf, u64)>) {
    println!("\nüí° –°–û–í–ï–¢–´ –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:");
    println!("{:-<60}", "");
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if !dirs.is_empty() && dirs[0].1.size > 1024 * 1024 * 1024 {
        println!("üî∏ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{}' –∑–∞–Ω–∏–º–∞–µ—Ç {}, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.", 
            dirs[0].0, format_size(dirs[0].1.size));
    }
    
    // –°–æ–≤–µ—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
    let mut has_large_logs = false;
    let mut has_large_media = false;
    let mut has_downloads = false;
    
    for (path, info) in dirs.iter().take(5) {
        if path.to_lowercase().contains("log") && info.size > 100 * 1024 * 1024 {
            has_large_logs = true;
        }
        
        if path.to_lowercase().contains("download") {
            has_downloads = true;
        }
        
        for (ext, size) in &info.file_types {
            if (ext == "mp4" || ext == "mov" || ext == "avi") && *size > 500 * 1024 * 1024 {
                has_large_media = true;
            }
        }
    }
    
    if has_large_logs {
        println!("üî∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ–ª—å—à–∏–µ –ª–æ–≥-—Ñ–∞–π–ª—ã. –†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –º–æ–∂–µ—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.");
    }
    
    if has_large_media {
        println!("üî∏ –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞–Ω–∏–º–∞—é—Ç –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤–∏–¥–µ–æ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –Ω–æ—Å–∏—Ç–µ–ª—å –∏–ª–∏ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.");
    }
    
    if has_downloads {
        println!("üî∏ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –º–æ–∂–µ—Ç –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.");
    }
    
    // –°–æ–≤–µ—Ç—ã –ø–æ –∫—Ä—É–ø–Ω—ã–º —Ñ–∞–π–ª–∞–º
    if !largest_files.is_empty() {
        let (path, size) = &largest_files[0];
        if *size > 1024 * 1024 * 1024 {
            println!("üî∏ –§–∞–π–ª '{}' –∑–∞–Ω–∏–º–∞–µ—Ç {}. –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç –º–µ—Å—Ç–æ.", 
                path.display(), format_size(*size));
        }
    }
    
    println!("üî∏ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–∂–∞—Ç–∏—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.");
    println!("üî∏ –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π –û–°.");
}